module bfd {
  namespace "urn:ietf:params:xml:ns:yang:bfd";
  prefix "bfd";
   
  import ietf-interfaces {
    prefix "if";
  }

  import ietf-inet-types {
    prefix "inet";
  }

  organization "IETF BFD Working Group";

  contact 
    "WG Web:   http://tools.ietf.org/wg/bfd
     WG List:  TBD
     WG Chair: Jeff Haas
     WG Chair: Nobo Akiya
     Editor:   Lianshu Zheng and Reshad Rahman";

  description 
    "This module contains the YANG definition for BFD parameters as per 
     RFC5880, RFC5881 and RFC5883";

  revision 2015-01-06 {
    description "Initial revision.";
  }

  typedef discriminator {
    type uint32 {
      range 1..4294967295;
    }
  }

  typedef diagnostic {    
    type enumeration {
      enum none {
        value 0;
      }
      enum controlExpiry {
        value 1;
      }
      enum echoFailed {
        value 2;
      }
      enum nborDown {
        value 3;
      }
      enum fwdingReset {
        value 4;
      }
      enum pathDown {
        value 5;
      }
      enum concPathDown {
        value 6;
      }
      enum adminDown {
        value 7;
      }
      enum reverseConcPathDown {
        value 8;
      }
    }
  }

  typedef state {    
    type enumeration {
      enum adminDown {
        value 0;
      }
      enum down {
        value 1;
      }
      enum init {
        value 2;
      }
      enum up {
        value 3;
      }
    }
  }

  typedef multiplier {
    type uint8 {
      range 1..255;
    }
  }

  typedef TTL {
    type uint8 {
      range 1..255;
    }
  }

  typedef bfd-auth-algorithm {
    description "Authentication algorithm";
    type enumeration {
      enum simple-password {
        description
          "Simple password";
      }
      
      enum keyed-md5 {
        description
          "Keyed message Digest 5";
      }
      
      enum meticulous-keyed-md5 {
        description
          "Meticulous keyed message Digest 5";
      }
                                               
      enum keyed-sha-1 {
        description
          "Keyed secure hash algorithm (SHA1) ";
      }
                                               
      enum meticulous-keyed-sha-1 {
        description
          "Meticulous keyed secure hash algorithm (SHA1) ";
      }
    }
  }

  typedef vrfName {
    description "VRF Name";
    type string;
  }        

  feature bfd-centralized-session-config {
    description "BFD session centralized config supported";
  }
  feature bfd-interface-config {
    description "BFD per-interface config supported";
  }
  feature bfd-authentication {
    description "BFD authentication supported";
  }

  grouping bfd-grouping-common-cfg-parms {
    description "BFD grouping for common config parameters";
    
    container bfd-common-cfg-parms {
      leaf local-multiplier {
        type multiplier;
        default 3;
      }

      leaf desired-min-tx-interval {
        type uint32;
        mandatory true;
      }

      leaf required-min-rx-interval {
        type uint32;
        mandatory true;
      }

      leaf demand-enabled {
        type boolean;
        default false;
      }

      leaf enable-authentication {
        type boolean;
        description 
          "If set, the Authentication Section is present and the session is
         to be authenticated (see RFC 5880 section 6.7 for details).";
        default false;
      }

      container authentication-parms {
        if-feature bfd-authentication;
        leaf key-chain-name {
          description
            "Key chain name";
          must "../algorithm" {
            error-message
              "May not be configured without algorithm";
          }
          type string;
        }
        leaf algorithm {
          description "Authentication algorithm to be used";
          must "../key-chain" {
            error-message
              "May not be configured without key-chain";
          }
          type bfd-auth-algorithm;
        }
      }
    }
  }

  grouping bfd-grouping-echo-cfg-parms {
    description "BFD grouping for echo config parameters";
    leaf desired-min-echo-tx-interval {
      type uint32;
    }

    leaf required-min-echo-rx-interval {
      type uint32;
    }
  }

  grouping bfd-client-cfg-parms {
    description "BFD grouping for config parameters which could be used by a protocol which is a client of BFD";
    
    container bfd-cfg {
      leaf enabled {
        type boolean;
        description "True if BFD is enabled";
        default false;
      }

      leaf local-multiplier {
        type multiplier;
        default 3;
      }

      leaf desired-min-tx-interval {
        type uint32;
        mandatory true;
      }

      leaf required-min-rx-interval {
        type uint32;
        mandatory true;
      }
    }
  }

  grouping bfd-all-session {
    description "BFD session operational information";
    leaf sesssion-type {
      type enumeration {
        enum ip-single-hop {
          value "0";
          description "IP single hop";
        }
        enum ip-multi-hop {
          value "1";
          description "IP multi hop";
        }
      }
    }
    leaf local-dscriminator {
      type discriminator;
    }
    leaf remote-dscriminator {
      type discriminator;
    }
    leaf remote-multiplier {
      type multiplier;
    }
    leaf out-if-name {
      description "Physical out interface name";
      config "false";
      type ifName;
    }                
    leaf demand-capability{
      description "Local demand mode capability";
      config "false";
      type boolean;
    }                

    list session-running {
      description "BFD session running information";
      leaf local-state {
        type state;
      }
      leaf remote-state {
        type state;
      } 
      leaf local-diagnostic {
        type diagnostic;
      }
      leaf remote-diagnostic {
        type diagnostic;
      }
      leaf detect-Mode {
        description "Detect mode";
        config "false";
        type enumeration {
          enum async-with-echo {
            value "0";
            description "Async with echo";
          }
          enum async-without-echo {
            value "1";
            description "Async without echo";
          }
          enum demand-with-echo {
            value "2";
            description "Demand with echo";
          }
          enum demand-without-echo {
            value "3";
            description "Demand without echo";
          }
        }
      }
      leaf actual-tx-interval {
        description "Actual transmit interval";
        config "false";
        type string;
      }
      leaf actual-rx-interval {
        description "Actual receive interval";
        config "false";
        type string;
      }
      leaf actual-echo-tx-interval {
        description "Actual echo transmit interval";
        config "false";
        type string;
      }
      leaf detect-time {
        description "Detect time";
        config "false";
        type string;
      }
    }

    list sesssion-statistics {
      description "BFD session statistics";
      leaf last-down-time {
        description "Timestamp of last down";
        config "false";
        type uint64;
      }
      leaf time-from-down {
        description "Duration of last down";
        config "false";
        type string;
      }
      leaf create-time {
        description "Timestamp of session created";
        config "false";
        type uint64;
      }
      leaf time-from-create {
        description "Duration of session created";
        config "false";
        type string;
      }
      leaf last-up-time {
        description "Timestamp of last UP";
        config "false";
        type uint64;
      }
      leaf time-from-up {
        description "Duration of last UP";
        config "false";
        type string;
      }
      leaf receive-pkt {
        description "Received Packet Count";
        config "false";
        type uint64;
      }
      leaf send-pkt {
        description "Sent Packet Count";
        config "false";
        type uint64;
      }
      leaf down-count {
        description "Session Down Count";
        config "false";
        type uint32;
      }
      leaf receive-bad-pkt {
        description "Received bad packet count";
        config "false";
        type uint64;
      }
      leaf send-failed-pkt {
        description "Packet Failed to Send Count";
        config "false";
        type uint64;
      }
      leaf short-break-count {
        description "Shortbreak count";
        config "false";
        default "0";
        type uint32;
      }
    }
  }

  container bfd-cfg {
    container bfd-session-cfg {
      if-feature bfd-centralized-session-config;
      list session-sh-ip {
        key "interface destination-address";
        leaf interface {
          type if:interface-ref;
        }
        leaf destination-address {
          type inet:ip-address;
        }
        uses  bfd-grouping-common-cfg-parms;

        uses bfd-grouping-echo-cfg-parms;
      }
      list session-mh-ip {

        key "vrf-name source-address destination-address";
        leaf vrf-name {
          type vrfName;
        }
        leaf source-address {
          type inet:ip-address;
        }
        leaf destination-address {
          type inet:ip-address;
        }
        uses  bfd-grouping-common-cfg-parms;

        leaf ttl {
          type TTL;
          default 255;
        }
      }
    }

    list bfd-interface-cfg {
      if-feature bfd-interface-config;

      description "Per-interface BFD configuration";
      key interface;
      leaf interface {
        type if:interface-ref;
      }
      uses  bfd-grouping-common-cfg-parms;

      uses bfd-grouping-echo-cfg-parms;   

    }
  }

  container bfd-oper {
    container bfd-session-statistics {
      config "false";
      description "BFD session number";
      leaf ip-sh-session-num {
        description "IP single hop session number";
        config "false";
        type uint32;
      }
      leaf ip-mh-session-num {
        description "IP multi hop session Number";
        config "false";
        type uint32;
      }
      leaf total-session-num {
        description "Total session number";
        config "false";
        type uint32;
      }
      leaf session-up-num {
        description "Session up number";
        config "false";
        type uint32;
      }
      leaf sess-down-num {
        description "Session down number";
        config "false";
        type uint32;
      }
    }
    
    container bfd-session-lists {
      config false;
      list session-ip-sh {
        key "interface destAddress";
        leaf interface {
          type if:interface-ref;
        }
        leaf destAddress {
          type inet:ip-address;
        }

        uses bfd-all-session;
      }

      list session-ip-mh {
        key "vrfName sourceAddress destAddress";
        leaf vrfName {
          type vrfName;
        }
        leaf source-address {
          type inet:ip-address;
        }
        leaf dest-address {
          type inet:ip-address;
        }
        leaf ttl {
          description "TTL of session";
          config "false";
          type TTL;
        }
        uses bfd-all-session;
      }
    }
  }
  
  grouping bfd-notification-params {
		description
		"This group describes common params that will be send 
		as part of BFD notification"
		
		leaf local-discr{
			description
			"BFD local discriminator"
			type uint32;
		}
		
		leaf remote-discr{
			description
			"BFD remote discriminator"
			type uint32;
		}
		
		leaf new-state{
			description
			"Current BFD state"
			type state;
		}
		
		leaf state-change-reason{
			description
			"BFD state change reason"
			type string;
		}
		
		leaf time-in-previous-state{
			description
			"How long the BFD session was UP"
			type string;
		}
		
		leaf vrf{
			description
			"Routing instance to which this BFD belong to"
			type string;
		}
		
		leaf peer-address{
			description
			"BFD peer address"
			type inet:ip-address;
		}
	}
	
	notification bfd-singlehop-notification{

		uses bfd-notification-params;
		
		leaf interface-name {
			description
			"Interface on which BFD is enabled"
			type string;
		}
		
		leaf echo-enabled{
			description
			"Was echo enabled for BFD"
			type boolean;
		}
	}
	
	
   notification bfd-multihop-notification{

		uses bfd-notification-params;
		
		leaf local-address{
			description
			"BFD local address"
			type inet:ip-address;
		}
	}
}
