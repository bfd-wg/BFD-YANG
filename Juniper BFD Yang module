/*
 * Copyright (c) 2014 Juniper Networks, Inc.
 * All rights reserved.
 */

 module configuration {
  namespace "http://yang.juniper.net/yang/1.1/jc";
  prefix jc;
  import junos-extension {
    prefix junos;
  }

  organization
    "Juniper Networks, Inc.";

  description
    "Junos YANG module for configuration hierarchies";

   typedef filename {
     type string;
   }
   typedef ipaddr {
     type string;
   }
   typedef ipprefix {
     type string;
   }
   typedef ipaddr-or-interface {
     type string;
   }
   typedef interface-name {
     type string;
   }
 
	/* BFD for aggregate interface */
	
	 container aggregated-ether-options {
		 description "Aggregated Ethernet interface-specific options";
		
		 leaf loopback {
		   description "Enable loopback";
		   type empty;
		 }

		 container load-balance {
		   uses aggregate-load-balance;
		 }
		
		 container bfd-liveness-detection {
		   presence "enable bfd-liveness-detection";
		   description "Bidirectional Forwarding Detection (BFD) options";
		   leaf version {
			 description "BFD protocol version number";
			 default automatic;
			 type enumeration {
			   enum 0 {
				 description "BFD version 0 (deprecated)";
			   }
			   enum 1 {
				 description "BFD version 1";
			   }
			   enum automatic {
				 description "Choose BFD version automatically";
			   }
			 }
		   }
		   leaf minimum-interval {
			 description "Minimum transmit and receive interval";
			 units "milliseconds";
			 type uint32 {
			   range "1 .. 255000";
			 }
		   }
		   leaf minimum-receive-interval {
			 description "Minimum receive interval";
			 units "milliseconds";
			 type uint32 {
			   range "1 .. 255000";
			 }
		   }
		   leaf multiplier {
			 description "Detection time multiplier";
			 default 3;
			 type uint32 {
			   range "1 .. 255";
			 }
		   }
		   choice adaptation-choice {
			 leaf no-adaptation {
			   description "Disable adaptation";
			   type empty;
			 }
		   }
		   container transmit-interval {
			 description "Transmit-interval options";
			 leaf minimum-interval {
			   description "Minimum transmit interval";
			   units "milliseconds";
			   type uint32 {
				 range "1 .. 255000";
			   }
			 }
			 leaf threshold {
			   description "High transmit interval triggering a trap";
			   units "milliseconds";
			   type uint32;
			 }
		   }
		   container detection-time {
			 description "Detection-time options";
			}
			 leaf threshold {
			   description "High detection-time triggering a trap";
			   units "milliseconds";
			   type uint32;
			 }
		   }
		   container authentication {
			 description "Authentication options";
			 leaf key-chain {
			   description "Key chain name";
			   must "../algorithm" {
				 error-message "May not be configured without algorithm";
			   }
			   junos:must "(\"security authentication-key-chains key-chain $$\")";
			   junos:must-message "Referenced key-chain must be defined";
			   type string;
			 }
			 leaf algorithm {
			   description "Algorithm name";
			   must "../key-chain" {
				 error-message "May not be configured without key-chain";
			   }
			   type enumeration {
				 enum simple-password {
				   description "Simple password";
				 }
				 enum keyed-md5 {
				   description "Keyed message Digest 5";
				 }
				 enum meticulous-keyed-md5 {
				   description "Meticulous keyed message Digest 5";
				 }
				 enum keyed-sha-1 {
				   description "Keyed secure hash algorithm (SHA1) ";
				 }
				 enum meticulous-keyed-sha-1 {
				   description "Meticulous keyed secure hash algorithm (SHA1) ";
				 }
			   }
			 }
			 leaf loose-check {
			   description "Verify authentication only if authentication is negotiated";
			   type empty;
			 }
		   }
		   leaf neighbor {
			 description "BFD neighbor address";
			 type ipaddr;
			 mandatory true;
		   }
		   leaf local-address {
			 description "BFD local address";
			 type ipaddr;
			 mandatory true;
		   }
		   leaf holddown-interval {
			 description "Time to hold the session-UP notification to the client";
			 units "milliseconds";
			 type uint32 {
			   range "0 .. 255000";
			 }
		   }
		 }
	}


	/* BFD for static route */
	
	list route {
	 key destination;
	 ordered-by user;
	 description "Static route";
	   leaf destination {
		 description "(null)";
		 type ipprefix;
	   }

	   container bfd-liveness-detection {
		 description "Bidirectional Forwarding Detection (BFD) options";
		 leaf version {
		   description "BFD protocol version number";
		   default automatic;
		   type enumeration {
			 enum 0 {
			   description "BFD version 0 (deprecated)";
			 }
			 enum 1 {
			   description "BFD version 1";
			 }
			 enum automatic {
			   description "Choose BFD version automatically";
			 }
		   }
		 }
		 leaf minimum-interval {
		   description "Minimum transmit and receive interval";
		   units "milliseconds";
		   type uint32 {
			 range "1 .. 255000";
		   }
		 }
		 leaf minimum-receive-interval {
		   description "Minimum receive interval";
		   units "milliseconds";
		   type uint32 {
			 range "1 .. 255000";
		   }
		 }
		 leaf multiplier {
		   description "Detection time multiplier";
		   default 3;
		   type uint32 {
			 range "1 .. 255";
		   }
		 }
		 choice adaptation-choice {
		   leaf no-adaptation {
			 description "Disable adaptation";
			 type empty;
		   }
		 }
		 container transmit-interval {
		   description "Transmit-interval options";
		   leaf minimum-interval {
			 description "Minimum transmit interval";
			 units "milliseconds";
			 type uint32 {
			   range "1 .. 255000";
			 }
		   }
		   leaf threshold {
			 description "High transmit interval triggering a trap";
			 units "milliseconds";
			 type uint32;
		   }
		 }
		 container detection-time {
		   description "Detection-time options";
		   leaf threshold {
			 description "High detection-time triggering a trap";
			 units "milliseconds";
			 type uint32;
		   }
		 }
		 container authentication {
		   description "Authentication options";
		   leaf key-chain {
			 description "Key chain name";
			 must "../algorithm" {
			   error-message "May not be configured without algorithm";
			 }
			 junos:must "(\"security authentication-key-chains key-chain $$\")";
			 junos:must-message "Referenced key-chain must be defined";
			 type string;
		   }
		   leaf algorithm {
			 description "Algorithm name";
			 must "../key-chain" {
			   error-message "May not be configured without key-chain";
			 }
			 type enumeration {
			   enum simple-password {
				 description "Simple password";
			   }
			   enum keyed-md5 {
				 description "Keyed message Digest 5";
			   }
			   enum meticulous-keyed-md5 {
				 description "Meticulous keyed message Digest 5";
			   }
			   enum keyed-sha-1 {
				 description "Keyed secure hash algorithm (SHA1) ";
			   }
			   enum meticulous-keyed-sha-1 {
				 description "Meticulous keyed secure hash algorithm (SHA1) ";
			   }
			 }
		   }
		   leaf loose-check {
			 description "Verify authentication only if authentication is negotiated";
			 type empty;
		   }
		 }
		 leaf neighbor {
		   description "BFD neighbor address";
		   type ipaddr;
		 }
		 leaf local-address {
		   description "BFD local address (for multihop only)";
		   type ipaddr;
		 }
		 leaf holddown-interval {
		   description "Time to hold the session-UP notification to the client";
		   units "milliseconds";
		   type uint32 {
			 range "0 .. 255000";
		   }
		 }
		 leaf minimum-receive-ttl {
		   description "Minimum receive TTL below which to drop";
		   type uint8 {
			 range "1 .. 255";
		   }
		 }
	   }
	}
        
	/* Groupings BFD for DHCP */
	
	grouping dhcp-liveness-detection-type {
	 description "DHCP client liveness detection processing";
	
	 container failure-action {
	   description "Liveness detection failure action options";
	   uses dhcp-liveness-detection-failure-action-type;
	 }
	 container method {
	   description "Liveness detection method options";
	   choice method-choice {
		 container bfd {
		   description "Bidirectional Forwarding Detection (BFD) options";
		   uses dhcp-bfd-liveness-detection-type;
		 }
	   }
	 }
   }
   grouping dhcp-bfd-liveness-detection-type {
	 description "Bidirectional Forwarding Detection (BFD) options";
	 leaf version {
	   description "BFD protocol version number";
	   default automatic;
	   type enumeration {
		 enum 0 {
		   description "BFD version 0 (deprecated)";
		 }
		 enum 1 {
		   description "BFD version 1";
		 }
		 enum automatic {
		   description "Choose BFD version automatically";
		 }
	   }
	 }
	 leaf minimum-interval {
	   description "Minimum transmit and receive interval";
	   units "milliseconds";
	   type uint32 {
		 range "30000 .. 255000";
	   }
	 }
	 leaf minimum-receive-interval {
	   description "Minimum receive interval";
	   units "milliseconds";
	   type uint32 {
		 range "30000 .. 255000";
	   }
	 }
	 leaf multiplier {
	   description "Detection time multiplier";
	   default 3;
	   type uint32 {
		 range "1 .. 255";
	   }
	 }
	 choice adaptation-choice {
	   leaf no-adaptation {
		 description "Disable adaptation";
		 type empty;
	   }
	 }
	 container transmit-interval {
	   description "Transmit-interval options";
	   leaf minimum-interval {
		 description "Minimum transmit interval";
		 units "milliseconds";
		 type uint32 {
		   range "30000 .. 255000";
		 }
	   }
	   leaf threshold {
		 description "High transmit interval triggering a trap";
		 units "milliseconds";
		 type uint32;
	   }
	 }
	 container detection-time {
	   description "Detection-time options";
	   leaf threshold {
		 description "High detection-time triggering a trap";
		 units "milliseconds";
		 type uint32;
	   }
	 }
	 leaf session-mode {
	   description "BFD single-hop or multihop session-mode";
	   default automatic;
	   type enumeration {
		 enum automatic {
		   description "Choose session-mode automatically";
		 }
		 enum single-hop {
		   description "Use single-hop";
		 }
		 enum multihop {
		   description "Use multihop";
		 }
	   }
	 }
	 leaf holddown-interval {
	   description "Time to hold the session-UP notification to the client";
	   default 0;
	   units "milliseconds";
	   type uint32 {
		 range "0 .. 255000";
	   }
	 }
   }


   /* BFD on a interface used by IGP */
   
	list interface {
	 key interface_name;
	 ordered-by user;
	 description "Include an interface in this area";
	   leaf interface_name {
		 description "Interface name";
	   }
	   
	   container bfd-liveness-detection {
		 description "Bidirectional Forwarding Detection options";
		 leaf version {
		   description "BFD protocol version number";
		   default automatic;
		   type enumeration {
			 enum 0 {
			   description "BFD version 0 (deprecated)";
			 }
			 enum 1 {
			   description "BFD version 1";
			 }
			 enum automatic {
			   description "Choose BFD version automatically";
			 }
		   }
		 }
		 leaf minimum-interval {
		   description "Minimum transmit and receive interval";
		   units "milliseconds";
		   type uint32 {
			 range "1 .. 255000";
		   }
		 }
		 leaf minimum-receive-interval {
		   description "Minimum receive interval";
		   units "milliseconds";
		   type uint32 {
			 range "1 .. 255000";
		   }
		 }
		 leaf multiplier {
		   description "Detection time multiplier";
		   default 3;
		   type uint32 {
			 range "1 .. 255";
		   }
		 }
		 choice adaptation-choice {
		   leaf no-adaptation {
			 description "Disable adaptation";
			 type empty;
		   }
		 }
		 container transmit-interval {
		   description "Transmit-interval options";
		   leaf minimum-interval {
			 description "Minimum transmit interval";
			 units "milliseconds";
			 type uint32 {
			   range "1 .. 255000";
			 }
		   }
		   leaf threshold {
			 description "High transmit interval triggering a trap";
			 units "milliseconds";
			 type uint32;
		   }
		 }
		 container detection-time {
		   description "Detection-time options";
		   leaf threshold {
			 description "High detection-time triggering a trap";
			 units "milliseconds";
			 type uint32;
		   }
		 }
		 container authentication {
		   description "Authentication options";
		   leaf key-chain {
			 description "Key chain name";
			 must "../algorithm" {
			   error-message "May not be configured without algorithm";
			 }
			 junos:must "(\"security authentication-key-chains key-chain $$\")";
			 junos:must-message "Referenced key-chain must be defined";
			 type string;
		   }
		   leaf algorithm {
			 description "Algorithm name";
			 must "../key-chain" {
			   error-message "May not be configured without key-chain";
			 }
			 type enumeration {
			   enum simple-password {
				 description "Simple password";
			   }
			   enum keyed-md5 {
				 description "Keyed message Digest 5";
			   }
			   enum meticulous-keyed-md5 {
				 description "Meticulous keyed message Digest 5";
			   }
			   enum keyed-sha-1 {
				 description "Keyed secure hash algorithm (SHA1) ";
			   }
			   enum meticulous-keyed-sha-1 {
				 description "Meticulous keyed secure hash algorithm (SHA1) ";
			   }
			 }
		   }
		   leaf loose-check {
			 description "Verify authentication only if authentication is negotiated";
			 type empty;
		   }
		 }
		 leaf full-neighbors-only {
		   description "Setup BFD sessions only to Full neighbors";
		   type empty;
		 }
	 }


	/* BFD for BGP */
	
    grouping juniper-protocols-bgp {
 
     container bfd-liveness-detection {
       description "Bidirectional Forwarding Detection (BFD) options";
       leaf version {
         description "BFD protocol version number";
         default automatic;
         type enumeration {
           enum 0 {
             description "BFD version 0 (deprecated)";
           }
           enum 1 {
             description "BFD version 1";
           }
           enum automatic {
             description "Choose BFD version automatically";
           }
         }
       }
       leaf minimum-interval {
         description "Minimum transmit and receive interval";
         units "milliseconds";
         type uint32 {
           range "1 .. 255000";
         }
       }
       leaf minimum-receive-interval {
         description "Minimum receive interval";
         units "milliseconds";
         type uint32 {
           range "1 .. 255000";
         }
       }
       leaf multiplier {
         description "Detection time multiplier";
         default 3;
         type uint32 {
           range "1 .. 255";
         }
       }
       choice adaptation-choice {
         leaf no-adaptation {
           description "Disable adaptation";
           type empty;
         }
       }
       container transmit-interval {
         description "Transmit-interval options";
         leaf minimum-interval {
           description "Minimum transmit interval";
           units "milliseconds";
           type uint32 {
             range "1 .. 255000";
           }
         }
         leaf threshold {
           description "High transmit interval triggering a trap";
           units "milliseconds";
           type uint32;
         }
       }
       container detection-time {
         description "Detection-time options";
         leaf threshold {
           description "High detection-time triggering a trap";
           units "milliseconds";
           type uint32;
         }
       }
       container authentication {
         description "Authentication options";
         leaf key-chain {
           description "Key chain name";
           must "../algorithm" {
             error-message "May not be configured without algorithm";
           }
           junos:must "(\"security authentication-key-chains key-chain $$\")";
           junos:must-message "Referenced key-chain must be defined";
           type string;
         }
         leaf algorithm {
           description "Algorithm name";
           must "../key-chain" {
             error-message "May not be configured without key-chain";
           }
           type enumeration {
             enum simple-password {
               description "Simple password";
             }
             enum keyed-md5 {
               description "Keyed message Digest 5";
             }
             enum meticulous-keyed-md5 {
               description "Meticulous keyed message Digest 5";
             }
             enum keyed-sha-1 {
               description "Keyed secure hash algorithm (SHA1) ";
             }
             enum meticulous-keyed-sha-1 {
               description "Meticulous keyed secure hash algorithm (SHA1) ";
             }
           }
         }
         leaf loose-check {
           description "Verify authentication only if authentication is negotiated";
           type empty;
         }
       }
       leaf session-mode {
         description "BFD single-hop or multihop session-mode";
         default automatic;
         type enumeration {
           enum automatic {
             description "Choose session-mode automatically";
           }
           enum single-hop {
             description "Use single-hop";
           }
           enum multihop {
             description "Use multihop";
           }
         }
       }
       leaf holddown-interval {
         description "Time to hold the session-UP notification to the client";
         units "milliseconds";
         type uint32 {
           range "0 .. 255000";
         }
       }
     }

