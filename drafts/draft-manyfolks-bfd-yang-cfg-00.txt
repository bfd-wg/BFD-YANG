



Network Working Group                                      L. Zheng, Ed.
Internet-Draft                                       Huawei Technologies
Intended status: Standards Track                          R. Rahman, Ed.
Expires: August 6, 2015                                    Cisco Systems
                                                           S. Pallagatti
                                                        Juniper Networks
                                                         M. Jethanandani
                                                       Ciena Corporation
                                                        February 2, 2015


      Yang Data Model for Bidirectional Forwarding Detection (BFD)
                  draft-manyfolks-bfd-yang-cfg-00.txt

Abstract

   This document defines a YANG data model that can be used to configure
   and manage Bidirectional Forwarding Detection (BFD).

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 6, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Zheng, et al.            Expires August 6, 2015                 [Page 1]

Internet-Draft                  BFD Yang                   February 2015


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Contributors  . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Design of the Data Model  . . . . . . . . . . . . . . . . . .   3
     2.1.  Design of configuration model . . . . . . . . . . . . . .   3
       2.1.1.  Centralized BFD configuration . . . . . . . . . . . .   4
         2.1.1.1.  Common BFD configuration  . . . . . . . . . . . .   4
         2.1.1.2.  Single-hop IP . . . . . . . . . . . . . . . . . .   4
         2.1.1.3.  Multi-hop IP  . . . . . . . . . . . . . . . . . .   5
         2.1.1.4.  Per-interface configuration . . . . . . . . . . .   5
       2.1.2.  Configuration in BFD clients  . . . . . . . . . . . .   6
     2.2.  Design of operational model . . . . . . . . . . . . . . .   6
     2.3.  Notifications . . . . . . . . . . . . . . . . . . . . . .   7
     2.4.  Configuration Data Hierarchy  . . . . . . . . . . . . . .   7
       2.4.1.  Centralized BFD configuration . . . . . . . . . . . .   7
       2.4.2.  Configuration in BFD clients  . . . . . . . . . . . .   9
     2.5.  Operational Data Hierarchy  . . . . . . . . . . . . . . .   9
     2.6.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .  11
     2.7.  Interaction with other YANG modules . . . . . . . . . . .  11
     2.8.  BFD Configuration Yang Module . . . . . . . . . . . . . .  11
     2.9.  BFD Client Example Configuration Yang Module  . . . . . .  17
     2.10. BFD Operational Yang Module . . . . . . . . . . . . . . .  18
     2.11. Security Considerations . . . . . . . . . . . . . . . . .  24
     2.12. IANA Considerations . . . . . . . . . . . . . . . . . . .  24
     2.13. Acknowledgements  . . . . . . . . . . . . . . . . . . . .  24
   3.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  25
     3.1.  Normative References  . . . . . . . . . . . . . . . . . .  25
     3.2.  Informative References  . . . . . . . . . . . . . . . . .  25
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  26

1.  Introduction

   YANG [RFC6020] is a data definition language that was introduced to
   define the contents of a conceptual data store that allows networked
   devices to be managed using NETCONF [RFC6241].  YANG is proving
   relevant beyond its initial confines, as bindings to other interfaces
   (e.g RESTCONF [I-D.ietf-netconf-restconf]) and encodings other than



Zheng, et al.            Expires August 6, 2015                 [Page 2]

Internet-Draft                  BFD Yang                   February 2015


   XML (e.g JSON) are being defined.  Furthermore, YANG data models can
   be used as the basis of implementation for other interfaces, such as
   CLI and programmatic APIs.

   This document defines a YANG data model that can be used to configure
   and manage Bidirectional Forwarding Detection (BFD)[RFC5880].  BFD is
   a network protocol which is used for liveness detection of arbitrary
   paths between systems.  Some examples of different types of paths
   over which we have BFD:

   1) Two systems directly connected via IP.  This is known as BFD over
   single-hop IP [RFC5881]

   2) Two systems connected via multiple hops [RFC5883]

   3) Two systems connected via MPLS Label Switched Paths (LSPs)
   [RFC5884]

   4) Two systems connected via a Link Aggregation Group (LAG) interface
   [RFC7130]

   BFD typically does not operate on its own.  Various control
   protocols, aka BFD clients, use the services provided by BFD for
   their own operation [RFC5882].  The obvious candidates which use BFD
   are those which do not have Hellos to detect failures (e.g. static
   routes) and routing protocols whose Hellos do not suport sub-second
   failure detection, e.g OSPF and IS-IS.

1.1.  Contributors

2.  Design of the Data Model

2.1.  Design of configuration model

   The configuration model consists mainly of the parameters specified
   in [RFC5880].  Some examples are desired minimum transmit interval,
   required minimum receive interval, detection multiplier etc

   Some implementations have BFD configuration under the BFD client,
   e.g.  BFD configuration is under routing applications such as OSPF,
   IS-IS, BGP etc.  Other implementations have BFD configuration
   centralized, i.e outside the multiple BFD clients.  In the sections
   below we address both approaches.








Zheng, et al.            Expires August 6, 2015                 [Page 3]

Internet-Draft                  BFD Yang                   February 2015


2.1.1.  Centralized BFD configuration

   The BFD data model consists of configuring BFD sessions of different
   types (e.g. single-hop IP, multi-hop IP etc).  Since the different
   session types have different keys we have a list per session type,
   but we use a grouping to share the common configuration data between
   the different session types.

2.1.1.1.  Common BFD configuration

   The common BFD session configuration items are put in a grouping to
   be used in multiple places, these items are:

   local-multiplier
           This is the detection time multiplier as defined in
           [RFC5880].

   desired-min-tx-interval
           This is the Desired Min TX Interval as defined in [RFC5880].

   required-min-rx-interval
           This is the Required Min RX Interval as defined in [RFC5880].

   demand-enabled
           Set to True to enable demand mode as defined in [RFC5880].

   enable-authentication
           Set to True to enable BFD authentication.

   authentication-algorithm
           Authentication algorithm to use (if enabled).

   key-chain-name
           Key-chain to be used for authentication (if enabled).

2.1.1.2.  Single-hop IP

   We have a list for BFD sessions over single-hop IP.  The key consists
   of:

   interface
           This is the interface on which the BFD packets for this
           session are transmitted and received.  Examples of an
           interface are physical media, virtual circuit, tunnel etc.

   destination address
           Address belonging to the peer system as per [RFC5881]




Zheng, et al.            Expires August 6, 2015                 [Page 4]

Internet-Draft                  BFD Yang                   February 2015


   The common configuration data in Section 2.1.1.1 is used for single-
   hop IP.  On top of that common data, we also need configuration data
   for echo:

   desired-min-echo-tx-interval
           This is the minimum interval that the local system would like
           to use when transmitting BFD echo packets.  If 0 the echo
           function as defined in [RFC5880] is disabled.

   required-min-echo-rx-interval
           The is the Required Min Echo RX Interval as defined in
           [RFC5880].

2.1.1.3.  Multi-hop IP

   We have a list for BFD sessions over multi-hop IP.  The key consists
   of:

   source address
           Address belonging to the local system as per [RFC5883]

   destination address
           Address belonging to the remote system as per [RFC5883]

   VRF name
           VRF in which the BFD multi-hop session is running

   The common configuration data in Section 2.1.1.1 is used for multi-
   hop IP.On top of that common data, we also need TTL:

   ttl
           TTL of outgoing BFD control packets.

2.1.1.4.  Per-interface configuration

   For implementations which have multiplier and intervals configured
   under the BFD clients we still need a central location to configure
   authentication, demand mode etc.  This can be done by configuring the
   following parameters per interface:

   Common parameters
           The common BFD parameters listed in Section 2.1.1.1

   Echo parameters
           The echo parameters listed in Section 2.1.1.2






Zheng, et al.            Expires August 6, 2015                 [Page 5]

Internet-Draft                  BFD Yang                   February 2015


2.1.2.  Configuration in BFD clients

   When BFD is configured in BFD clients, it is highly desirable to have
   BFD configuration consistency between those clients.  In this
   approach we have a grouping for BFD configuration which applications
   can import in their YANG module:

   - This provides consistency since the same grouping is being used in
   all applications making use of BFD

   - Since not all implementations of those BFD clients have support for
   BFD, we must use if-feature in the respective YANG modules

   An application importing the BFD configuration grouping could do so
   in a hierarchical manner if it has multiple levels at which BFD
   configuration can be applied.  In a subsequent section we provide an
   example of how a BFD client would use the grouping in such a way.

   The configuration items are:

   enabled
           Set to True to enable BFD.

   local-multiplier
           This the detection time multiplier as defined in [RFC5880].

   desired-min-tx-interval
           This the Desired Min TX Interval as defined in [RFC5880].

   required-min-rx-interval
           This the Required Min RX Interval as defined in [RFC5880].

   BFD multiplier and intervals are parameters which are meaningful to a
   protocol which is a BFD client, since those parameters impact the
   failure detection time.  Other BFD parameters such as authentication,
   enabling echo function, enabling demand mode would still be
   configured centrally in BFD

2.2.  Design of operational model

   The operational model containes both the overall statistics of BFD
   sessions running on the device and the per session operational
   statistics.  Since BFD is used for liveness detection of arbitrary
   paths, there is no uniform key to identify a BFD session. e.g. a BFD
   single-hop IP session is uniquely identified by the combination of
   destination IP address and interface whereas a multihop IP session is
   uniquely identified by the combination of source IP address,
   destination IP address and VRF.  For this reason, for per session



Zheng, et al.            Expires August 6, 2015                 [Page 6]

Internet-Draft                  BFD Yang                   February 2015


   operational statistics, we do not have a single list with different
   type BFD sessions.  Instead we have a container in which we have
   multiple lists, where each list corresponds to one specific path type
   for BFD.  For example we have one operational list for BFD single-hop
   IP, another list for BFD multi-hop IP etc.  In each list, mainly
   three categories of operational items are shown.  The fundamental
   information of a BFD session such as the local discriminator, remote
   discriminator and the capability of supporting demand detect mode are
   shown in the first category.  A second category includes a BFD
   session running information, e.g. the FSM the device in and
   diagnostic code received.  Another example is the actual transmit
   interval between the control packets, which may be different from the
   desired minimum transmit interval configured, is shown in this
   category.  Similar examples are actual received interval between the
   control packets and the actual transmit interval between the echo
   packets.  The third category contains the detailed statistics of this
   session, e.g. when the session went to up/down, how long it has been
   since the session is up/down.


2.3.  Notifications


2.4.  Configuration Data Hierarchy

2.4.1.  Centralized BFD configuration

   The following is the centralized configuration data hierarchy:

   We have a container which contains a list for each session type

   We have per-interface configuration



















Zheng, et al.            Expires August 6, 2015                 [Page 7]

Internet-Draft                  BFD Yang                   February 2015


module: bfd
   +--rw bfd-cfg
      +--rw bfd-session-cfg {bfd-standalone-session-config}?
      |  +--rw session-sh-ip* [interface destination-address]
      |  |  +--rw interface                        if:interface-ref
      |  |  +--rw destination-address              inet:ip-address
      |  |  +--rw bfd-common-cfg-parms
      |  |  |  +--rw local-multiplier?           multiplier
      |  |  |  +--rw desired-min-tx-interval     uint32
      |  |  |  +--rw required-min-rx-interval    uint32
      |  |  |  +--rw demand-enabled?             boolean
      |  |  |  +--rw enable-authentication?      boolean
      |  |  |  +--rw authentication-parms {bfd-authentication}?
      |  |  |     +--rw key-chain-name?   string
      |  |  |     +--rw algorithm?        bfd-auth-algorithm
      |  |  +--rw desired-min-echo-tx-interval?    uint32
      |  |  +--rw required-min-echo-rx-interval?   uint32
      |  +--rw session-mh-ip* [vrf-name source-address destination-address]
      |     +--rw vrf-name                string
      |     +--rw source-address          inet:ip-address
      |     +--rw destination-address     inet:ip-address
      |     +--rw bfd-common-cfg-parms
      |     |  +--rw local-multiplier?           multiplier
      |     |  +--rw desired-min-tx-interval     uint32
      |     |  +--rw required-min-rx-interval    uint32
      |     |  +--rw demand-enabled?             boolean
      |     |  +--rw enable-authentication?      boolean
      |     |  +--rw authentication-parms {bfd-authentication}?
      |     |     +--rw key-chain-name?   string
      |     |     +--rw algorithm?        bfd-auth-algorithm
      |     +--rw ttl?                    TTL
      +--rw bfd-interface-cfg* [interface] {bfd-interface-config}?
         +--rw interface                        if:interface-ref
         +--rw bfd-common-cfg-parms
         |  +--rw local-multiplier?           multiplier
         |  +--rw desired-min-tx-interval     uint32
         |  +--rw required-min-rx-interval    uint32
         |  +--rw demand-enabled?             boolean
         |  +--rw enable-authentication?      boolean
         |  +--rw authentication-parms {bfd-authentication}?
         |     +--rw key-chain-name?   string
         |     +--rw algorithm?        bfd-auth-algorithm
         +--rw desired-min-echo-tx-interval?    uint32
         +--rw required-min-echo-rx-interval?   uint32







Zheng, et al.            Expires August 6, 2015                 [Page 8]

Internet-Draft                  BFD Yang                   February 2015


2.4.2.  Configuration in BFD clients

   The following is the configuration data hierarchy for a hypothetical
   BFD client called bfd-routing-app, the BFD configuration is supported
   conditionally via use of if-feature.

   We have a list of areas and in each area we have a list of
   interfaces.  The BFD configuration grouping is used in a hierarchical
   fashion, it can be applied in "area" and "interface":

   - If BFD configuration is applied in an interface, that configuration
   takes precedence over any BFD configuration (if any) at the area
   level

   - If BFD configuration is applied in an "area" and none of the
   interfaces in that area has BFD configuration, then all interfaces
   belong to the "area" in question inherit the BFD configuration for
   the area in question.

   module: bfd-routing-app
      +--rw area* [area-id]
         +--rw area-id      uint32
         +--rw bfd-cfg
         |  +--rw enabled?                    boolean
         |  +--rw local-multiplier?           multiplier
         |  +--rw desired-min-tx-interval     uint32
         |  +--rw required-min-rx-interval    uint32
         +--rw interface* [interface]
            +--rw interface    if:interface-ref
            +--rw bfd-cfg
               +--rw enabled?                    boolean
               +--rw local-multiplier?           multiplier
               +--rw desired-min-tx-interval     uint32
               +--rw required-min-rx-interval    uint32



2.5.  Operational Data Hierarchy

   The complete data hierarchy of BFD YANG operational model is
   presented below.

   module: bfd-oper
      +--ro bfdSessionStatistics
      |  +--ro ipSHSessNum?    uint32
      |  +--ro ipMHSessNum?    uint32
      |  +--ro totalSessNum?   uint32
      |  +--ro SessUpNum?      uint32



Zheng, et al.            Expires August 6, 2015                 [Page 9]

Internet-Draft                  BFD Yang                   February 2015


      |  +--ro SessDownNum?    uint32
      +--ro bfdSessionLists
         +--ro sessionIpSH* [interface destAddress]
         |  +--ro interface              if:interface-ref
         |  +--ro destAddress            inet:ip-address
         |  +--ro sesssion-type?         enumeration
         |  +--ro local-dscriminator?    bfd-parms:discriminator
         |  +--ro remote-dscriminator?   bfd-parms:discriminator
         |  +--ro remote-multiplier?     bfd-parms:multiplier
         |  +--ro outIfName?             ifName
         |  +--ro demandCapability?      boolean
         |  +--ro SessRunning*
         |  |  +--ro local-state?               bfd-parms:state
         |  |  +--ro remote-state?              bfd-parms:state
         |  |  +--ro local-diagnostic?          bfd-parms:diagnostic
         |  |  +--ro remote-diagnostic?         bfd-parms:diagnostic
         |  |  +--ro detect-Mode?               enumeration
         |  |  +--ro actual-tx-interval?        string
         |  |  +--ro actual-rx-interval?        string
         |  |  +--ro actual-echo-tx-interval?   string
         |  |  +--ro detectTime?                string
         |  +--ro SessStat*
         |     +--ro lastDownTime?      uint64
         |     +--ro timeFromDown?      string
         |     +--ro createTime?        uint64
         |     +--ro timeFromCreate?    string
         |     +--ro lastUpTime?        uint64
         |     +--ro timeFromUp?        string
         |     +--ro recvPkt?           uint64
         |     +--ro sendPkt?           uint64
         |     +--ro downCount?         uint32
         |     +--ro recvBadPkt?        uint64
         |     +--ro sendFailedPkt?     uint64
         |     +--ro shortBreakCount?   uint32
         +--ro sessionIpMH* [vrfName sourceAddress destAddress]
            +--ro vrfName                vrfName
            +--ro sourceAddress          inet:ip-address
            +--ro destAddress            inet:ip-address
            +--ro ttl?                   uint32
            +--ro sesssion-type?         enumeration
            +--ro local-dscriminator?    bfd-parms:discriminator
            +--ro remote-dscriminator?   bfd-parms:discriminator
            +--ro remote-multiplier?     bfd-parms:multiplier
            +--ro outIfName?             ifName
            +--ro demandCapability?      boolean
            +--ro SessRunning*
            |  +--ro local-state?               bfd-parms:state
            |  +--ro remote-state?              bfd-parms:state



Zheng, et al.            Expires August 6, 2015                [Page 10]

Internet-Draft                  BFD Yang                   February 2015


            |  +--ro local-diagnostic?          bfd-parms:diagnostic
            |  +--ro remote-diagnostic?         bfd-parms:diagnostic
            |  +--ro detect-Mode?               enumeration
            |  +--ro actual-tx-interval?        string
            |  +--ro actual-rx-interval?        string
            |  +--ro actual-echo-tx-interval?   string
            |  +--ro detectTime?                string
            +--ro SessStat*
               +--ro lastDownTime?      uint64
               +--ro timeFromDown?      string
               +--ro createTime?        uint64
               +--ro timeFromCreate?    string
               +--ro lastUpTime?        uint64
               +--ro timeFromUp?        string
               +--ro recvPkt?           uint64
               +--ro sendPkt?           uint64
               +--ro downCount?         uint32
               +--ro recvBadPkt?        uint64
               +--ro sendFailedPkt?     uint64
               +--ro shortBreakCount?   uint32



2.6.  Examples

2.7.  Interaction with other YANG modules

   TBD.

2.8.  BFD Configuration Yang Module

module bfd {
  namespace "urn:ietf:params:xml:ns:yang:bfd-parms";
  prefix "bfd";

  import ietf-interfaces {
    prefix "if";
  }

  import ietf-inet-types {
    prefix "inet";
  }

  organization "IETF BFD Working Group";

  contact
    "WG Web:   http://tools.ietf.org/wg/bfd
     WG List:  TBD



Zheng, et al.            Expires August 6, 2015                [Page 11]

Internet-Draft                  BFD Yang                   February 2015


     WG Chair: Jeff Haas
     WG Chair: Nobo Akiya
     Editor:   Vero + Reshad";

  description
    "This module contains the YANG definition for BFD parameters as per
     RFC5881";

  revision 2015-01-06 {
    description "Initial revision.";
  }

  typedef discriminator {
    type uint32 {
      range 1..4294967295;
    }
  }

  typedef diagnostic {
    type enumeration {
      enum none {
    value 0;
      }
      enum controlExpiry {
    value 1;
      }
      enum echoFailed {
    value 2;
      }
      enum nborDown {
    value 3;
      }
      enum fwdingReset {
    value 4;
      }
      enum pathDown {
    value 5;
      }
      enum concPathDown {
    value 6;
      }
      enum adminDown {
    value 7;
      }
      enum reverseConcPathDown {
    value 8;
      }
    }



Zheng, et al.            Expires August 6, 2015                [Page 12]

Internet-Draft                  BFD Yang                   February 2015


  }

  typedef state {
    type enumeration {
      enum adminDown {
    value 0;
      }
      enum down {
    value 1;
      }
      enum init {
    value 2;
      }
      enum up {
    value 3;
      }
    }
  }

  typedef multiplier {
    type uint8 {
      range 1..255;
    }
  }

  typedef TTL {
    type uint8 {
      range 1..255;
    }
  }

  typedef bfd-auth-algorithm {
    description "Authentication algorithm";
    type enumeration {
      enum simple-password {
    description
      "Simple password";
      }

      enum keyed-md5 {
    description
      "Keyed message Digest 5";
      }

      enum meticulous-keyed-md5 {
    description
      "Meticulous keyed message Digest 5";
      }



Zheng, et al.            Expires August 6, 2015                [Page 13]

Internet-Draft                  BFD Yang                   February 2015


      enum keyed-sha-1 {
    description
      "Keyed secure hash algorithm (SHA1) ";
      }

      enum meticulous-keyed-sha-1 {
    description
      "Meticulous keyed secure hash algorithm (SHA1) ";
      }
    }
  }

  feature bfd-standalone-session-config {
    description "BFD session standalone config supported";
  }
  feature bfd-interface-config {
    description "BFD per-interface config supported";
  }
  feature bfd-authentication {
    description "BFD authentication supported";
  }

  grouping bfd-grouping-common-cfg-parms {
    description "BFD grouping for common config parameters";

    container bfd-common-cfg-parms {
      leaf local-multiplier {
        type multiplier;
    default 3;
      }

      leaf desired-min-tx-interval {
        type uint32;
    mandatory true;
      }

      leaf required-min-rx-interval {
        type uint32;
    mandatory true;
      }

      leaf demand-enabled {
    type boolean;
    default false;
      }

      leaf enable-authentication {
    type boolean;



Zheng, et al.            Expires August 6, 2015                [Page 14]

Internet-Draft                  BFD Yang                   February 2015


    description
      "If set, the Authentication Section is present and the session is
         to be authenticated (see RFC 5880 section 6.7 for details).";
    default false;
      }

      container authentication-parms {
    if-feature bfd-authentication;
    leaf key-chain-name {
      description
        "Key chain name";
      must "../algorithm" {
        error-message
          "May not be configured without algorithm";
      }
      type string;
    }
    leaf algorithm {
      description "Authentication algorithm to be used";
      must "../key-chain" {
        error-message
          "May not be configured without key-chain";
      }
      type bfd-auth-algorithm;
    }
      }
    }
  }

  grouping bfd-grouping-echo-cfg-parms {
    description "BFD grouping for echo config parameters";
    leaf desired-min-echo-tx-interval {
      type uint32;
    }

    leaf required-min-echo-rx-interval {
      type uint32;
    }
  }

  grouping bfd-client-cfg-parms {
    description "BFD grouping for config parameters which could be used by a protocol which is a client of BFD";

    container bfd-cfg {
      leaf enabled {
        type boolean;
        description "True if BFD is enabled";
    default false;



Zheng, et al.            Expires August 6, 2015                [Page 15]

Internet-Draft                  BFD Yang                   February 2015


      }

      leaf local-multiplier {
        type multiplier;
    default 3;
      }

      leaf desired-min-tx-interval {
        type uint32;
    mandatory true;
      }

      leaf required-min-rx-interval {
        type uint32;
    mandatory true;
      }
    }
  }

  container bfd-cfg {
    container bfd-session-cfg {
      if-feature bfd-standalone-session-config;
      list session-sh-ip {
    key "interface destination-address";
    leaf interface {
      type if:interface-ref;
    }
    leaf destination-address {
      type inet:ip-address;
    }
    uses  bfd-grouping-common-cfg-parms;

    uses bfd-grouping-echo-cfg-parms;
      }
      list session-mh-ip {

    key "vrf-name source-address destination-address";
    leaf vrf-name {
      type string;
    }
    leaf source-address {
      type inet:ip-address;
    }
    leaf destination-address {
      type inet:ip-address;
    }
    uses  bfd-grouping-common-cfg-parms;




Zheng, et al.            Expires August 6, 2015                [Page 16]

Internet-Draft                  BFD Yang                   February 2015


    leaf ttl {
      type TTL;
      default 255;
    }
      }
    }

    list bfd-interface-cfg {
      if-feature bfd-interface-config;

      description "Per-interface BFD configuration";
      key interface;
      leaf interface {
    type if:interface-ref;
      }
      uses  bfd-grouping-common-cfg-parms;

      uses bfd-grouping-echo-cfg-parms;

    }
  }
}

2.9.  BFD Client Example Configuration Yang Module


   module bfd-routing-app {
      namespace "urn:cisco:params:xml:ns:yang:bfdroutingapp";
      prefix bfd-routing-app;

      import bfd {
        prefix "bfd";
      }

      import ietf-interfaces {
        prefix "if";
      }

      organization
        "ACME";
      contact
        "acme@acme.com";

      description
        "Testing BFD grouping (simulating a routing application)";

      revision 2014-02-14 {
        description



Zheng, et al.            Expires August 6, 2015                [Page 17]

Internet-Draft                  BFD Yang                   February 2015


          "Initial revision.";
      }

      feature routing-app-bfd {
        description "BFD configuration under routing-app";
      }

      list area {
        description
          "Specify a routing area.";

        key "area-id";

        leaf area-id {
          type uint32;
        }

        uses bfd:bfd-client-cfg-parms {
          if-feature routing-app-bfd;
        }

        list interface {
          key "interface";
          leaf interface {
            type if:interface-ref;
          }
          uses bfd:bfd-client-cfg-parms {
        if-feature routing-app-bfd;
          }
        }

      }
   }

2.10.  BFD Operational Yang Module


module bfd-oper {
    namespace "urn:ietf:params:xml:ns:yang:bfd-oper";
    prefix "bfd-oper";

    import bfd-parameters {
        prefix "bfd-parms";
    }

    import ietf-interfaces {
        prefix "if";
    }



Zheng, et al.            Expires August 6, 2015                [Page 18]

Internet-Draft                  BFD Yang                   February 2015


    import ietf-inet-types {
        prefix "inet";
    }

    organization "IETF BFD Working Group";

    contact
        "WG Web:   http://tools.ietf.org/wg/bfd
        WG List:  TBD
        WG Chair: Jeff Haas
        WG Chair: Nobo Akiya
        Editor:   Vero + Reshad";

    description
        "This module contains the YANG definition for BFD parameters as per RFC5881";

    revision 2015-01-17 {
        description "Initial revision.";
    }

    typedef ifName {
        description "Interface name";
        type string;
    }
    typedef vrfName {
        description "VRF Name";
        type string;
    }

    grouping bfdAllSession {
        description "BFD Session Configuration Information";
        leaf sesssion-type {
            type enumeration {
                enum SINGLE_HOP_IP {
                    value "0";
                    description "SINGLE_HOP_IP:";
                }
                enum MULTI_HOP_IP {
                    value "1";
                    description "MULTI_HOP_IP:";
                }
            }
        }
        leaf local-dscriminator {
            type bfd-parms:discriminator;
        }
        leaf remote-dscriminator {
            type bfd-parms:discriminator;



Zheng, et al.            Expires August 6, 2015                [Page 19]

Internet-Draft                  BFD Yang                   February 2015


        }
        leaf remote-multiplier {
            type bfd-parms:multiplier;
        }
        leaf outIfName {
            description "Physical Out Interface Name";
            config "false";
            type ifName;
        }
        leaf demandCapability{
            description "Local Demand Mode Capability";
            config "false";
            type boolean;
        }

        list SessRunning {
            description "BFD Session Running Information";
            leaf local-state {
                type bfd-parms:state;
            }
            leaf remote-state {
                type bfd-parms:state;
            }
            leaf local-diagnostic {
                type bfd-parms:diagnostic;
            }
            leaf remote-diagnostic {
                type bfd-parms:diagnostic;
            }
            leaf detect-Mode {
                description "Detect Mode";
                config "false";
                type enumeration {
                    enum ASYNC_WITH_ECHO {
                        value "0";
                        description "ASYNC_WITH_ECHO:";
                    }
                    enum ASYNC_WITHOUT_ECHO {
                        value "1";
                        description "ASYNC_WITHOUT_ECHO:";
                    }
                    enum DEMAND_WITH_ECHO {
                        value "2";
                        description "DEMAND_WITH_ECHO:";
                    }
                    enum DEMAND_WITHOUT_ECHO {
                        value "3";
                        description "DEMAND_WITHOUT_ECHO:";



Zheng, et al.            Expires August 6, 2015                [Page 20]

Internet-Draft                  BFD Yang                   February 2015


                    }
                }
            }
            leaf actual-tx-interval {
                description "Actual transmit interval";
                config "false";
                type string;
            }
            leaf actual-rx-interval {
                description "Actual receive interval";
                config "false";
                type string;
            }
            leaf actual-echo-tx-interval {
                description "Actual echo transmit interval";
                config "false";
                type string;
            }
            leaf detectTime {
                description "Detect Time";
                config "false";
                type string;
            }
        }

        list SessStat {
            description "BFD Session Statistics";
            leaf lastDownTime {
                description "Timestamp of last down";
                config "false";
                type uint64;
            }
            leaf timeFromDown {
                description "Duration of last down";
                config "false";
                type string;
            }
            leaf createTime {
                description "Timestamp of session created";
                config "false";
                type uint64;
            }
            leaf timeFromCreate {
                description "Duration of session created";
                config "false";
                type string;
            }
            leaf lastUpTime {



Zheng, et al.            Expires August 6, 2015                [Page 21]

Internet-Draft                  BFD Yang                   February 2015


                description "Timestamp of last UP";
                config "false";
                type uint64;
            }
            leaf timeFromUp {
                description "Duration of last UP";
                config "false";
                type string;
            }
            leaf recvPkt {
                description "Recieved Packet Count";
                config "false";
                type uint64;
            }
            leaf sendPkt {
                description "Sent Packet Count";
                config "false";
                type uint64;
            }
            leaf downCount {
                description "Session Down Count";
                config "false";
                type uint32;
            }
            leaf recvBadPkt {
                description "Received Bad Pcket Count";
                config "false";
                type uint64;
            }
            leaf sendFailedPkt {
                description "Packet Failed to Send Count";
                config "false";
                type uint64;
            }
            leaf shortBreakCount {
                description "Shortbreak Count";
                config "false";
                default "0";
                type uint32;
            }
        }
    }

    container bfdSessionStatistics {
        config "false";
        description "BFD Session Number";

        leaf ipSHSessNum {



Zheng, et al.            Expires August 6, 2015                [Page 22]

Internet-Draft                  BFD Yang                   February 2015


            description "IP Single Hop Session Number";
            config "false";
            type uint32;
        }
        leaf ipMHSessNum {
            description "IP Multi Hop Session Number";
            config "false";
            type uint32;
        }
        leaf totalSessNum {
            description "Total Session Number";
            config "false";
            type uint32;
        }
        leaf SessUpNum {
            description "Session Up Number";
            config "false";
            type uint32;
        }
        leaf SessDownNum {
            description "Session Down Number";
            config "false";
            type uint32;
        }
    }

    container bfdSessionLists {
        config false;
        list sessionIpSH {
            key "interface destAddress";
            leaf interface {
                type if:interface-ref;
            }
            leaf destAddress {
                type inet:ip-address;
            }

            uses bfdAllSession;
        }

        list sessionIpMH {
            key "vrfName sourceAddress destAddress";
            leaf vrfName {
                type vrfName;
            }
            leaf sourceAddress {
                type inet:ip-address;
            }



Zheng, et al.            Expires August 6, 2015                [Page 23]

Internet-Draft                  BFD Yang                   February 2015


            leaf destAddress {
                type inet:ip-address;
            }
            leaf ttl {
                description "TTL of session";
                config "false";
                type uint32 {
                    range "1..255";
                }
            }
            uses bfdAllSession;
        }
    }
}



2.11.  Security Considerations

   The YANG module defined in this memo is designed to be accessed via
   the NETCONF protocol [RFC6241].  The lowest NETCONF layer is the
   secure transport layer and the mandatory to implement secure
   transport is SSH [RFC6242].  The NETCONF access control model
   [RFC6536] provides the means to restrict access for particular
   NETCONF users to a pre-configured subset of all available NETCONF
   protocol operations and content.

   The YANG module has writeable data nodes which can be used for
   creation of BFD sessions and modification of BFD session parameters.
   The system should "police" creation of BFD sessions to prevent new
   sessions from causing existing BFD sessions to fail.  For BFD session
   modification, the BFD protocol has mechanisms in place which allow
   for in service modification.

2.12.  IANA Considerations

   The IANA is requested to as assign a new new namespace URI from the
   IETF XML registry.

   URI:TBD

2.13.  Acknowledgements

   We would also like to thank Nobo Akiya and Jeff Haas for their
   encouragement on this work.






Zheng, et al.            Expires August 6, 2015                [Page 24]

Internet-Draft                  BFD Yang                   February 2015


3.  References

3.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5880]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD)", RFC 5880, June 2010.

   [RFC5881]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD) for IPv4 and IPv6 (Single Hop)", RFC 5881, June
              2010.

   [RFC5882]  Katz, D. and D. Ward, "Generic Application of
              Bidirectional Forwarding Detection (BFD)", RFC 5882, June
              2010.

   [RFC5883]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD) for Multihop Paths", RFC 5883, June 2010.

   [RFC5884]  Aggarwal, R., Kompella, K., Nadeau, T., and G. Swallow,
              "Bidirectional Forwarding Detection (BFD) for MPLS Label
              Switched Paths (LSPs)", RFC 5884, June 2010.

   [RFC6020]  Bjorklund, M., "YANG - A Data Modeling Language for the
              Network Configuration Protocol (NETCONF)", RFC 6020,
              October 2010.

   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and A.
              Bierman, "Network Configuration Protocol (NETCONF)", RFC
              6241, June 2011.

   [RFC7130]  Bhatia, M., Chen, M., Boutros, S., Binderberger, M., and
              J. Haas, "Bidirectional Forwarding Detection (BFD) on Link
              Aggregation Group (LAG) Interfaces", RFC 7130, February
              2014.

3.2.  Informative References

   [I-D.ietf-netconf-restconf]
              Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", draft-ietf-netconf-restconf-04 (work in
              progress), January 2015.

   [RFC6087]  Bierman, A., "Guidelines for Authors and Reviewers of YANG
              Data Model Documents", RFC 6087, January 2011.




Zheng, et al.            Expires August 6, 2015                [Page 25]

Internet-Draft                  BFD Yang                   February 2015


Authors' Addresses

   Lianshu Zheng (editor)
   Huawei Technologies
   China

   Email: vero.zheng@huawei.com


   Reshad Rahman (editor)
   Cisco Systems
   USA

   Email: rrahman@cisco.com


   Santosh Pallagatti
   Juniper Networks
   India

   Email: santoshpk@juniper.net


   Mahesh Jethanandani
   Ciena Corporation

   Email: mjethanandani@gmail.com
























Zheng, et al.            Expires August 6, 2015                [Page 26]
