



Network Working Group                                      L. Zheng, Ed.
Internet-Draft                                       Huawei Technologies
Intended status: Standards Track                          R. Rahman, Ed.
Expires: August 6, 2015                                    Cisco Systems
                                                           S. Pallagatti
                                                        Juniper Networks
                                                         M. Jethanandani
                                                       Ciena Corporation
                                                        February 2, 2015


      Yang Data Model for Bidirectional Forwarding Detection (BFD)
                  draft-manyfolks-bfd-yang-cfg-00.txt

Abstract

   This document defines a YANG data model that can be used to configure
   and manage Bidirectional Forwarding Detection (BFD).

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 6, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Zheng, et al.            Expires August 6, 2015                 [Page 1]

Internet-Draft                  BFD Yang                   February 2015


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Contributors  . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Design of the Data Model  . . . . . . . . . . . . . . . . . .   3
     2.1.  Configuration model . . . . . . . . . . . . . . . . . . .   3
       2.1.1.  Configuration in BFD clients  . . . . . . . . . . . .   3
       2.1.2.  Standalone BFD configuration  . . . . . . . . . . . .   4
     2.2.  Operational model . . . . . . . . . . . . . . . . . . . .   4
     2.3.  Notifications . . . . . . . . . . . . . . . . . . . . . .   4
     2.4.  Configuration Data Hierarchy  . . . . . . . . . . . . . .   4
       2.4.1.  Configuration in BFD clients  . . . . . . . . . . . .   4
     2.5.  Operational Data Hierarchy  . . . . . . . . . . . . . . .   5
     2.6.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .   7
     2.7.  Interaction with other YANG modules . . . . . . . . . . .   7
     2.8.  BFD Yang Module . . . . . . . . . . . . . . . . . . . . .   7
     2.9.  Security Considerations . . . . . . . . . . . . . . . . .   7
     2.10. IANA Considerations . . . . . . . . . . . . . . . . . . .   7
     2.11. Acknowledgements  . . . . . . . . . . . . . . . . . . . .   7
   3.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     3.1.  Normative References  . . . . . . . . . . . . . . . . . .   8
     3.2.  Informative References  . . . . . . . . . . . . . . . . .   8
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   8

1.  Introduction

   YANG [RFC6020] is a data definition language that was introduced to
   define the contents of a conceptual data store that allows networked
   devices to be managed using NETCONF [RFC6241].  YANG is proving
   relevant beyond its initial confines, as bindings to other interfaces
   (e.g RESTCONF) and encodings other than XML (e.g JSON) are being
   defined.  Furthermore, YANG data models can be used as the basis of
   implementation for other interfaces, such as CLI and programmatic
   APIs.

   This document defines a YANG data model that can be used to configure
   and manage Bidirectional Forwarding Detection (BFD)[RFC5880].  BFD is




Zheng, et al.            Expires August 6, 2015                 [Page 2]

Internet-Draft                  BFD Yang                   February 2015


   a network protocol which is used for liveness detection of arbitrary
   paths between systems.  Some examples:

   1) Two systems directly connected via IP.  This is known as BFD over
   single-hop IP [RFC5881]

   2) Two systems connected via multiple hops [RFC5883]

   3) Two systems connected via MPLS Label Switched Paths (LSPs)
   [RFC5884]

   4) Two systems connected via a Link Aggregation Group (LAG) interface
   [RFC7130]

   BFD typically does not operate on its own.  Various control
   protocols, aka BFD clients, use the services provided by BFD for
   their own operation [RFC5882].  The obvious candidates which use BFD
   are those which do not have Hellos to detect failures (e.g. static
   routes) and routing protocols whose Hellos do not suport sub-second
   failure detection, e.g OSPF and IS-IS.

1.1.  Contributors

2.  Design of the Data Model

2.1.  Configuration model

   The configuration model consists mainly of the paramters specified in
   [RFC5880].  Some examples are desired minimum transmit interval,
   required minimum receive interval, deteciton multiplier etc

   TBD DO WE WANT TO LIST ALL CONFIG PARMS HERE???

   Some implementations have BFD configuration under the BFD client,
   e.g.  BFD configuration is under routing applications such as OSPF,
   IS-IS, BGP etc.  Other implementations have BFD configuration as
   standalone, i.e outside the BFD clients.  In the sections below we
   address both approaches.


2.1.1.  Configuration in BFD clients

   When BFD is configured in BFD clients, it is highly desirable to have
   BFD configuration consistency between those clients.  In this
   approach we have a grouping for BFD configuration which applications
   can import in their YANG module:





Zheng, et al.            Expires August 6, 2015                 [Page 3]

Internet-Draft                  BFD Yang                   February 2015


   - This provides consistency since the same grouping is being used in
   all applications making use of BFD

   - Since not all implementations of those BFD clients have support for
   BFD, we SHOULD use if-feature in the respective YANG modules

   An application importing the BFD configuration grouping could do so
   in a hierarchical manner if it has multiple levels at which BFD
   configuration can be applied.  In a subsequent section we provide an
   example of how a BFD client would use the grouping in such a way.

2.1.2.  Standalone BFD configuration

   Mahesh TBD

2.2.  Operational model

   Since BFD is used for liveness detection of arbitrary paths, there is
   no uniform key to identify a BFD session. e.g. a BFD single-hop IP
   session is uniquely identified by the combination of destination IP
   address and interface whereas a multihop IP session is uniquely
   identified by the combination of source IP address, destination IP
   address and VRF.  For this reason we do not have a single operational
   list with all the BFD sessions.  Instead we have a container in which
   we have multiple lists, where each list corresponds to one specific
   path type for BFD.  For example we have one operational list for BFD
   single-hop IP, another list for BFD multi-hop IP etc


2.3.  Notifications


2.4.  Configuration Data Hierarchy

2.4.1.  Configuration in BFD clients

   The following is the configuration data hierarchy for a hypothetical
   BFD client called bfd-routing-app, the BFD configuration is supported
   conditionally via use of if-feature.

   We have a list of areas and in each area we have a list of
   interfaces.  The BFD configuration grouping is used in a hierarchical
   fashion, it can be applied in "area" and "interface":

   - If BFD configuration is applied in an interface, that configuration
   takes precedence over any BFD configuration (if any) at the area
   level




Zheng, et al.            Expires August 6, 2015                 [Page 4]

Internet-Draft                  BFD Yang                   February 2015


   - If BFD configuration is applied in an "area" and none of the
   interafces in that area has BFD configuration, then all interfaces
   belong to the "area" in question inherit the BFD configuration for
   the area in question.

   module: bfd-routing-app
      +--rw area [area-id]
         +--rw area-id       uint32
         +--rw bfd-sh-cfg
         |  +--rw enabled?                         boolean
         |  +--rw echo-enabled?                    boolean
         |  +--rw local-multiplier?                multiplier
         |  +--rw desired-min-tx-interval?         uint32
         |  +--rw required-min-rx-interval?        uint32
         |  +--rw required-min-rx-echo-interval?   uint32
         |  +--rw enable-authentication?           boolean
         |  +--rw authentication-parms
         |     +--rw key-chain?   string
         |     +--rw algorithm?   bfd-auth-algorithm
         +--rw interface [interface]
            +--rw interface     if:interface-ref
            +--rw bfd-sh-cfg
               +--rw enabled?                         boolean
               +--rw echo-enabled?                    boolean
               +--rw local-multiplier?                multiplier
               +--rw desired-min-tx-interval?         uint32
               +--rw required-min-rx-interval?        uint32
               +--rw required-min-rx-echo-interval?   uint32
               +--rw enable-authentication?           boolean
               +--rw authentication-parms
                  +--rw key-chain?   string
                  +--rw algorithm?   bfd-auth-algorithm


2.5.  Operational Data Hierarchy

   The complete data hierarchy of BFD YANG operational model is
   presented below.

module: bfd-oper
   +--ro bfdSessionStatistic
   |  +--ro ipSessNum?      uint32
   |  +--ro totalSessNum?   uint32
   |  +--ro SessUpNum?      uint32
   |  +--ro SessDownNum?    uint32
   |  +--ro usedDiscrNum?   uint32
   +--ro session-lists
      +--ro session-sh-ip* [interface destination-address]



Zheng, et al.            Expires August 6, 2015                 [Page 5]

Internet-Draft                  BFD Yang                   February 2015


      |  +--ro interface              if:interface-ref
      |  +--ro destination-address    inet:ip-address
      |  +--ro sesssion-type?         enumeration
      |  +--ro local-dscriminator?    bfd-parms:discriminator
      |  +--ro remote-dscriminator?   bfd-parms:discriminator
      |  +--ro remote-multiplier?     bfd-parms:multiplier
      |  +--ro outIfName?             ifName
      |  +--ro demandCapability?      boolean
      |  +--ro SessRunning*
      |  |  +--ro local-state?               bfd-parms:state
      |  |  +--ro remote-state?              bfd-parms:state
      |  |  +--ro local-diagnostic?          bfd-parms:diagnostic
      |  |  +--ro remote-diagnostic?         bfd-parms:diagnostic
      |  |  +--ro detect-Mode?               enumeration
      |  |  +--ro actual-tx-interval?        string
      |  |  +--ro actual-rx-interval?        string
      |  |  +--ro actual-echo-rx-interval?   string
      |  |  +--ro Multiplier?                string
      |  |  +--ro detectTime?                string
      |  |  +--ro ttl?                       uint32
      |  |  +--ro udpDstPort?                uint32
      |  +--ro SessStat*
      |     +--ro lastDownTime?      uint64
      |     +--ro timeFromDown?      string
      |     +--ro createTime?        uint64
      |     +--ro timeFromCreate?    string
      |     +--ro lastUpTime?        uint64
      |     +--ro timeFromUp?        string
      |     +--ro recvPkt?           uint64
      |     +--ro sendPkt?           uint64
      |     +--ro downCount?         uint32
      |     +--ro recvBadPkt?        uint64
      |     +--ro sendBadPkt?        uint64
      |     +--ro shortBreakCount?   uint32
      +--ro session-mh-ip* [vrf-name source-address destination-address]
         +--ro vrf-name               string
         +--ro source-address         inet:ip-address
         +--ro destination-address    inet:ip-address
         +--ro sesssion-type?         enumeration
         +--ro local-dscriminator?    bfd-parms:discriminator
         +--ro remote-dscriminator?   bfd-parms:discriminator
         +--ro remote-multiplier?     bfd-parms:multiplier
         +--ro outIfName?             ifName
         +--ro demandCapability?      boolean
         +--ro SessRunning*
         |  +--ro local-state?               bfd-parms:state
         |  +--ro remote-state?              bfd-parms:state
         |  +--ro local-diagnostic?          bfd-parms:diagnostic



Zheng, et al.            Expires August 6, 2015                 [Page 6]

Internet-Draft                  BFD Yang                   February 2015


         |  +--ro remote-diagnostic?         bfd-parms:diagnostic
         |  +--ro detect-Mode?               enumeration
         |  +--ro actual-tx-interval?        string
         |  +--ro actual-rx-interval?        string
         |  +--ro actual-echo-rx-interval?   string
         |  +--ro Multiplier?                string
         |  +--ro detectTime?                string
         |  +--ro ttl?                       uint32
         |  +--ro udpDstPort?                uint32
         +--ro SessStat*
            +--ro lastDownTime?      uint64
            +--ro timeFromDown?      string
            +--ro createTime?        uint64
            +--ro timeFromCreate?    string
            +--ro lastUpTime?        uint64
            +--ro timeFromUp?        string
            +--ro recvPkt?           uint64
            +--ro sendPkt?           uint64
            +--ro downCount?         uint32
            +--ro recvBadPkt?        uint64
            +--ro sendBadPkt?        uint64
            +--ro shortBreakCount?   uint32

2.6.  Examples

2.7.  Interaction with other YANG modules

   TBD.

2.8.  BFD Yang Module


2.9.  Security Considerations

   TBD

2.10.  IANA Considerations

   The IANA is requested to as assign a new new namespace URI from the
   IETF XML registry.

   URI:TBD

2.11.  Acknowledgements

   We would also like to thank Nobo Akiya and Jeff Haas for their
   encouragement on this work.




Zheng, et al.            Expires August 6, 2015                 [Page 7]

Internet-Draft                  BFD Yang                   February 2015


3.  References

3.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5880]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD)", RFC 5880, June 2010.

   [RFC5881]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD) for IPv4 and IPv6 (Single Hop)", RFC 5881, June
              2010.

   [RFC5882]  Katz, D. and D. Ward, "Generic Application of
              Bidirectional Forwarding Detection (BFD)", RFC 5882, June
              2010.

   [RFC5883]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD) for Multihop Paths", RFC 5883, June 2010.

   [RFC5884]  Aggarwal, R., Kompella, K., Nadeau, T., and G. Swallow,
              "Bidirectional Forwarding Detection (BFD) for MPLS Label
              Switched Paths (LSPs)", RFC 5884, June 2010.

   [RFC6020]  Bjorklund, M., "YANG - A Data Modeling Language for the
              Network Configuration Protocol (NETCONF)", RFC 6020,
              October 2010.

   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and A.
              Bierman, "Network Configuration Protocol (NETCONF)", RFC
              6241, June 2011.

   [RFC7130]  Bhatia, M., Chen, M., Boutros, S., Binderberger, M., and
              J. Haas, "Bidirectional Forwarding Detection (BFD) on Link
              Aggregation Group (LAG) Interfaces", RFC 7130, February
              2014.

3.2.  Informative References

   [RFC6087]  Bierman, A., "Guidelines for Authors and Reviewers of YANG
              Data Model Documents", RFC 6087, January 2011.

Authors' Addresses







Zheng, et al.            Expires August 6, 2015                 [Page 8]

Internet-Draft                  BFD Yang                   February 2015


   Lianshu Zheng (editor)
   Huawei Technologies
   China

   Email: vero.zheng@huawei.com


   Reshad Rahman (editor)
   Cisco Systems
   USA

   Email: rrahman@cisco.com


   Santosh Pallagatti
   Juniper Networks
   India

   Email: santoshpk@juniper.net


   Mahesh Jethanandani
   Ciena Corporation

   Email: mjethanandani@gmail.com


























Zheng, et al.            Expires August 6, 2015                 [Page 9]
